

inledande programmering python Assignment 2

Exercise 1
Write a program smallest_k.py which for any given positive integer n (read from the keyboard) computes the smallest integer k such that 1+3+5+7+...+k >= n. An example of an execution:

Enter a positive integer: 100
19 is the smallest k such 1+3+5+7+...+k >= 100

Notice: The program should be terminated with a suitable error message if a non-positive n is provided.

Exercise 2
Write a program largest_k.py which for any given positive integer n (read from the keyboard) computes the largest integer k such that 0+2+4+6+8+...+k < n. An example of an execution:

Enter a positive integer: 25
8 is the largest k such that 0+2+4+6+...+k < 25

Notice: The program should be terminated with a suitable error message if a non-positive n is provided.

Exercise 3
Write a program divisible.py that prints all the numbers from 100 to 200, ten per line, that are divisible by 4 or 5, but not both. The numbers in a printed line are separated by exactly one space. Hence, the output should look exactly like this:

104 105 108 110 112 115 116 124 125 128 
130 132 135 136 144 145 148 150 152 155 
156 164 165 168 170 172 175 176 184 185 
188 190 192 195 196

Notice: The program should not take any user input. It should just print the numbers formatted as described above.

Exercise 4
Write a program countdigits.py, which for any given positive number N (read from the keyboard) prints the number of zeros, odd digits, and even digits of the integer. An example of an execution:

Enter a large positive integer: 6789500

Zeros: 2
Odd: 3
Even: 2

Note: in this case we consider zeros to be neither odd nor even.

Exercise 5
Write a program highlow.py, implementing the game High and Low. The computer chooses a random integer between 1 and 100 and lets the user guess the value. After each guess, the user is given a clue of the type higher or lower. An example of an execution:

Guess 1: 67
   Clue: higher
Guess 2: 82
   Clue: lower
Guess 3: 77
   Correct answer after only 3 guesses - Excellent!

After 10 guesses, the program ends with a suitable comment.

Exercise 6
Write a program triangle.py reading a positive odd integer n from the keyboard, and then prints two triangles. First a right-angled triangle, then an isosceles triangle. See example below to see what we mean by right-angled and isosceles triangles.

Enter an odd positive integer: 7

Right-Angled Triangle:
*******
 ******
  *****
   ****
    ***
     **
      *

Isosceles Triangle:
   *
  ***
 *****
*******

The program should end with an error message if the input n is not an odd positive integer.

Exercise 7
Write a program random_numbers.py that reads a positive integer n from the keyboard and then:
- Generates and prints (in a single line) n random numbers in the interval [1,100]
- Prints the average value (with two decimals), the smallest number (min), and the largest number (max).
An example of an execution:

Enter number of integers to be generated: 10

Generated values: 77 15 13 54 96 73 100 12 98 28 
Average, min, and max are 56.6, 12, and 100

A suitable error message should be presented if the input number n is non-positive.

If time permits

Exercise 8
Write a program birthday_candles.py that computes how many boxes of candles a person needs to buy each year for his birthday cake. You can assume that the person reaches an age of 100, the number of candles used each year is the same as the age, that you save non-used candles from one year to another, and that each box contains 24 candles. Also, at the end, we want you to print the total number of boxes one has to buy, and how many candles that are available after having celebrated the 100th birthday. An example of an execution:

Before birthday 1, buy 1 box(es)
Before birthday 7, buy 1 box(es)
Before birthday 10, buy 1 box(es)
Before birthday 12, buy 1 box(es)
Before birthday 14, buy 1 box(es)

...

Before birthday 95, buy 3 box(es)
Before birthday 96, buy 4 box(es)
Before birthday 97, buy 5 box(es)
Before birthday 98, buy 4 box(es)
Before birthday 99, buy 4 box(es)
Before birthday 100, buy 4 box(es)

Total number of boxes: 211, Remaining candles: 14

Notice: In our example we only have a print-out of those birthdays where you must buy boxes. In the non-printed years (e.g. 2-6 and 8-9) you can handle the birthdays without having to buy any more candles. 

Lecture 5 - Functions

Exercise 9
Inside file distance.py, create a function distance(x1,y1,x2,y2) which computes the distance between two points x1,y1 and x2,y2 using the formula

distance = Sqrt( (x1-x2)^2 + (y1-y2)^2 )

Sqrt() means "the square root of" and ^ means "raised to".

Also, add program code so that a user can provide the point coordinates and get the distance as in the example below:

Enter x1: 1
Enter y1: 1
Enter x2: 5
Enter y2: 6

The distance between (1.0,1.0) and (5.0,6.0) is 6.403

Notice: The answer should be presented with three decimal digits.

Exercise 10
Inside the file readpositive.py, create a function is_positive_and_odd(n) that returns True if integer n is positive and odd (otherwise False). Then write a program using this function to repeatedly ask a user to enter a positive and odd integer (from the keyboard) until a proper (positive and odd) integer has been provided. It should ask the user up to five times and (of course) return the value once it fulfils the positive/odd criteria.

Exercise 11
Inside file stringfunctions.py, create the string related functions we describe below. In a separate file stringmain.py, write a program showing how the different functions defined in stringfunctions.py can be used.
    A function concat(s, n) that returns the result of concatenating the string s with itself n times
    A function count(s, x) that returns the number of times the character x occurs in the string s. For example, for the string s="hello" and character x="l" the function should return 2.
    A function reverse(s) that returns a string with all the characters in s in reverse order.
    A function first_last(s) that returns the first and last characters in the string s.
    A function has_two_X(s) that return True if the string contains exactly two instances of the character X, otherwise False.
    A function has_duplicates(s) that returns True if the string s contains any duplicate characters, otherwise False. 
Notice: You can assume that the arguments used in a call to any of these functions are of the correct (expected) type. Also, notice that this exercise doesn't require any input.

Exercise 12
There are four different digits A, B, C, and D such that he number DCBA is equal to 4 times the number ABCD. What are the four digits? Note: to make ABCD and DCBA a proper four digit integer, neither A nor D can be zero. The name of the program computing A, B, C, and D should be named abcd.py.

Hint: Use a quadruple nested loop and a function get_number(a, b, c, d) that converts digits a, b, c, d into a four digit integer abcd.

If time permits
Exercise 13

Assume a unit circle centred around origin inside a square with sides 2 like in the figure above. Assume also that we randomly generate N points (x,y) where both x and y are within the range [- 1,1]. The proportion of points inside the circle should then approximately be the same as the ratio between the circle area pi*R*R (which equals pi since R=1) and the square area 4. This relation can be used to compute an approximation of pi. Write a program pi_approx.py that computes (and prints) a pi approximation for N=100, N=10000, and N=1000000. Print also the error (i.e. the absolut value of pi_actual - pi_approx).

Lecture 6 - Objects and Lists

Exercise 14
Create a program reverse_order.py that reads an arbitrary number of positive integers from the keyboard and then prints them in reverse order. The reading stops when the user inputs a negative number. An example of an execution:

Enter positive integers. End by giving a negative integer.
Integer 1: 5
Integer 2: 10
Integer 3: 15
Integer 4: 20
Integer 5: -7

Number of positive integers: 4
In reverse order: [20, 15, 10, 5]

Exercise 15
Write a program two_dice.py that use the random module to simulate that you are rolling two dice 10000 times. At the same time, keep track of the number of times you get the result (adding the dice values) 2, 3, ..., 11, 12. (Use a list to store a count of the numbers.) After the simulation, present the frequencies for the different numbers. An example of an execution:

Frequency table (sum,count) for rolling two dices 10000 times
2	267
3	555
4	833
5	1101
6	1346
7	1690
8	1399
9	1083
10	862
11	580
12	284

Note: No input in this program. It should just present a randomly generated frequency table,

Exercise 16
The Swedish Lotto works by randomly selecting seven of 35 numbers (in sequence). Write a program called lotto.py which creates a valid lotto sequence, that is seven numbers in the range from 1 to 35 without duplicates. See below for an example execution:

The Lotto numbers this week:
5 6 18 21 24 31 32

Note: No input in this program. It should just present a valid (randomly selected) lotto sequence,

Exercise 17
Inside file list_functions.py, create the list related functions we describe below. In a separate file list_main.py, write a program showing how the different functions defined in list_functions.py can be used.
    A function random_list(n) that returns a list containing n random integers in the interval 1 to 100.
    A function average(lst) returning the average (a rounded off integer) of all values in the list lst.
    A function only_odd(lst) that returns a new list containing only the odd integers in lst.
    A function to_string(lst) that returns a comma separated string representation (a single string) of the elements in lst. For example, to_string([1,2,3]) should return a string "[1,2,3]".
    A function contains(lst,a,b) that returns True if a is directly followed by b anywhere in the list lst. Hence, contains([1,2,3,4],2,3) should return True whereas contains([1,2,3,4],2,4) should return False.
    A function has_duplicates(lst) that returns True if the list lst contains any duplicate elemments, otherwise False. 
Notice: You can assume that the arguments used in a call to any of these functions are of the correct (expected) type. Also, notice that this exercise doesn't require any input.

Exercise 18
Inside file palindrome.py, create a function is_palindrome(s) that returns True only if the string s is a palindrome. A string is a palindrome if it contains the same sequence of letters when read backwards. We make no difference between upper and lower case letters. Examples of palindromes are:


"Was it a rat I saw?"     "A nut for a jar of tuna."    "Madam"    "Ni talar bra latin!"   

Also, add program code demonstarting how the function can be used. Hint: Start by creating a new string with only lower case letters and where all non-letters have been removed. For example, start by converting "Was it a rat I saw? to "wasitaratisaw.

If time permits
Exercises 19 and 20 are basically open problems to solve using the Python skills you have learned so far. We expect well-structured code where functions are used when suitable.

Exercise 19
When the union is reporting about the latest salary negotiations they are presenting the average salary, the median salary, and the salary gap for the workers that they represent. Write a program salary_revision.py that reads an arbitrary number of salaries (integers) and then reports the median and average salaries, and the salary gap. All of them should be integers (correctly rounded off).

By salary gap we mean the difference between the highest and lowest saleries. The median salary is the middle salary (or average of the two middle salaries) when all saleries have been sorted. The easiest way to sort a list is to use the sort method in the list class.

Two different executions might look like this:

Provide salaries: 21700 28200 26300 25100 22600 22800 19900 
Median: 22800
Average: 23800
Gap: 8300

Provide salaries: 22100 29800 27300 25400 23100 22300
Median: 24250
Average: 25000
Gap: 7700

Notice, how to read an arbitrary number of integers from the keyboard was shown in Lecture 6.

Exercise 20
A random walk is basically a sequence of steps in some enclosed plane, where the direction of each step is random. The walk terminates when a maximal number of steps have been taken or when a step goes outside the given boundary of the plane.

For this task, assume a plane given by a grid, with the point (0, 0) at the center. The size of the plane is given by an integer; if the given integer is k, then the values of the x and y coordinates can vary from -k to k. Each step will be one unit up, one unit down, one unit to the right or one unit to the left (no diagonal movements).

Simulation
Create program drunken_sailor.py, simulating walks of a drunken sailor on a platform in a lake. The program should read the boundary, the maximum number of steps, and the number of drunken sailors to simulate. One drunken sailor at a time should be put on the platform and perform its walk. Your program should count how many sailors fall into the water. Test your program for some different values of size and number of steps. Example of an execution:

   Enter the size: 10
   Enter the number of steps: 50
   Enter the number of sailors: 150
   
   Out of 150 drunk sailors, 17 (11.33%) fell into the water.


